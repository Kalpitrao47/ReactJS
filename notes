1-Inception-
Whatever you write inside a script tag is the javascript.
ReactElement is an Object.
ReactElement(Object) =>Html(Browser Understand)

2-Igniting Our App:
First Create a New Repo in github
Initialize git in your local machine in vs code.      ---- git init
git branch -M main
git add .
git commit -m "Initial Commit"
git remote add origin https://github.com/Kalpitrao47/ReactJS.git
git push -u origin main

npm init
package.json is the configuration for the npm.

We will use Parcel library in our app. 
npm install -D parcel             (dev dependency)

There are 2 types of dependency that we can install.
>dev dependency-(Generally required in development phase).
>Normal dependency. 

What is package.json?
->Its a configuration for npm. It keeps a track of what version of that package is installed in our system. 

What is package-lock.json?
->It keeps the track of exact versions of all the dependencies.

What is node_modules?
->It is like a database of the dependencies or of the packages that our project needs.

Create a .gitignore file to ignore to node_modules
Add /node_modules inside the .gitignore file
(Because the node_modules is a big file and have much more dependencies).

npx parcel index.html(hosting our app on server).

Difference between npm and npx 
npm- Install a package 
npx- Execute a package

npm install react
npm i react-dom

Now we no longer need cdn links.

#Parcel
-Dev Build 
-Local Server
-HMR - Hot Module Replacement
-Caching - Faster Buils
-Image Optimization
-Minification
-Bundling
-Compress
-Consistant Hashing
-Code Splitting
-Differential Bundling
-Diagnostic
-Error Handling
-https


Here we are generating production build-
npx parcel build index.html
Then you will get an error. Remove main in package.json.



3-Laying the Foundation
Create Scripts in package.json for start and build 
"scripts": {
    "start":"parcel index.html",
    "build":"parcel build index.html",
    "test": "jest"
  },


Jsx is not html in js. Infact Jsx is html like syntax.

Babel job is to convert jsx to react code.
Babel is a javascript compiler.

Go to babels offical website and type this code:-
const jsxheading = <h1>USing JSx</h1>

It will convert to React.createElement as we did earlier.

How many Components are there in React?
//Class Based Components
//Functional Based Components

React Functional Component:-
A Function which is returning a jsx is a Functional Component.

The below 2 functional components are both one and the same.

1* const HeaderComponent = () =>{
    return (
    <h1>USing Functional Component</h1>
    )
}

2* const HeaderComponent = () => (
  <h1>USing Functional Component</h1>
  )


Now Call the function or component inside another Component
const TitleComponent = () =>{
    return (
    <h1>USing Functional Component Title</h1>
    )
}


const HeaderComponent = () =>{
    return (
        <>     
        {TitleComponent()}                                ------------First method 
        {TitleComponent()}                                
         {/* <TitleComponent/> */}                        ------------Second method
    <h1>USing Functional Component</h1>
    </>

    )
}



4-Talk is Cheap Show me the Code.
What is props in react?
->When you have to dynamically pass in some data to a component,you pass it as a prop.
->Passing props to a Component is just like passing argument to a function.

Config driven UI.
Means according to the data given from the backend the UI is getting changed.

React official documentation itself says that when mapping dont use index as the keys.
If you dont have a unique key in the api then we should atleast use index as the key.



5-Lets Get Hooked
There are two types of export:-
-named export 
-default export

named export is imported like this:-
import { LOGO_URL } from "../utils/constants";

default export is imported without {}.

#React Hooks
(Normal Js utility functions)
-useState() -Superpowerful variable 
-useEffect()


How React works behind the scenes?
Reconciliation Algorithm (React Fiber)



6-Exploring the Wrold
Monolith Architecture-When the apps were developed earlier they were designed using monolith architecture.
Monolith architecture refers to a software design approach where an entire application is built as a single, self-contained unit. In this architectural style, all the components, modules, and functions of the application are tightly integrated and run as a single codebase. This stands in contrast to microservices architecture, where an application is broken down into smaller, loosely coupled services that communicate with each other.

Microservice Architecture-Different services for different Jobs.
Microservices architecture is a software design approach where an application is broken down into a collection of small, loosely coupled services that can be developed, deployed, and maintained independently. Each service represents a specific business capability and communicates with other services through well-defined APIs. This approach stands in contrast to monolith architecture, where the entire application is built as a single, integrated unit.

There are 2 ways that can approaches that how webapps or Ui Application fetch the data from the backend.
1= Page Load->Api Call(Suppose Takes 500ms for the api Call)->Render On UI.
2= Page Loads->Render the UI->API Call->Render the UI Again.     (Example Skeleton).(Always use the 2nd approach)

-What is Hooks?
Hooks is a normal Javascript function which react gives us for specific useCases.
-What is useState?
useState is used to create State variables.
-what is useEffect?
useEffect pass 2 Arguments
1= Arrow Function 
2= Dependency Array

Example-useEffect(()=>{}, []);
()=>{}-------This is the callback function.

When will this useEffect callback function be called?
-The Callback function will be called after the Component renders.
Suppose we have the Body Component .Now when the Body Component Loads it will render the component and as soon as the render cycle is finished it will call the callback function.

Now When We fetch data from the Swiggy it is throwing up an erro of CORS-POLICY.
What is this CORS-POLICY?
OUr browser block us to call API's from one origin to different origin.(Swiggys api from local host)

Now How to Bypass this Cors?
Download Cors Chrome Extension.
-Now we can call Swiggy's Api from our local host......(Amazing)

Shimmer UI-(Search on Google(Skeleton))

Whenever state variables update,react triggers a reconciliation cycle(re-renders the component).


7-Finding the Path

IF No dependency array in useEffect=>useEffect is called on every render.
If dependency array is empty then useEffect is called on initial render and just once when the component is rendered for the first time.
If dependency is [btnReact] => called evrytime when btnReact is updated.

Never use useState inside any condition,for loops,functions.

For Creating routing we should go to App.js which is the main file or the root level Component.
USe createBrowserRouter,RouterProvider,from "react-router-dom";


2 Types of Routing in web apps:-
1*Client Side Routing 
2*Server Side Routing

Client-Side Routing:
Client-side routing, also known as "single-page application (SPA) routing," involves managing the routing logic entirely on the client side without making additional requests to the server when the user navigates between different pages or views. In a React.js application, this is typically achieved using libraries like react-router or reach-router.

Advantages of Client-Side Routing:
Faster User Experience
Reduced Server Load


Server-Side Routing:
Server-side routing involves the server handling navigation and rendering of different pages based on the URL. When a user requests a new URL, the server responds with the appropriate HTML for that specific route. This approach is common in traditional multi-page applications.

Advantages of Server-Side Routing:
Better SEO



8-Lets Get Classy
Class Based Components

import React from "react";

class UserClass extends React.Component{
    render () {
        return (
            <div className="user-card">
                <h2>Name: Kalpit Raorane</h2>
                <h3>Age: 27</h3>
            </div>
        )
    }
}

export default UserClass;


What are React Components Life Cycle methods in the React Class Based Components?


Suppose You have 2 Component. The first one is the Parent Class Component and the Second One is the Child Class Component.
Then It will render as follows:
First the constructor will be called then the render will be called.
Now just like we have constructor and render methods we also have componentDidMount() method.
First Parent Constructor Called, then Parent Render Called, then CHild Constructor Called, then Child Render Called, then Child ComponentDidMount,
then Parent ComponentDidMount is called.




1********Mounting Phase:

constructor(): The constructor is called when the component is being initialized. It's the right place to set up the initial state and bind event handlers.
render(): This is where the component's JSX is returned. It's responsible for rendering the UI.
componentDidMount(): This method is called after the component has been rendered to the DOM. It's a good place to perform side-effects like making API calls or setting up subscriptions.

Now Why the ComponentDidMount is used?
->It is used to mamke api calls.
OK Now why we make api calls in componentDidMount?
Just like we use useEffect to fetch data...And just like in function based component first the Component loads then it renders the component and then makes an api call and then renders again ...... componentDidMount is same like useEffect.(but its not equivalent)

Now what if there are multiple Class Componenets. How will the life Cycle work.
->First Parent Constructor Called, then Parent Render Called, then CHild Constructor 1 Called, then Child Render 1 Called,then CHild Constructor 2 Called, then Child Render 2 Called, then Child 1 ComponentDidMount and Child 2 ComponentDidMount will be called and then at last
then Parent ComponentDidMount is called.
(Also refer the diagram on google "react lifecycle methods diagram")


Parent Constructor Called
Parent Render Called

CHild 1 Constructor Called        Render phase
Child 1 Render Called             Render phase    
CHild 2 Constructor Called        Render phase
Child 2 Render Called             Render phase

Child 1 ComponentDidMount         Commit phase
Child 2 ComponentDidMount         Commit phase
Parent ComponentDidMount          Commit phase


